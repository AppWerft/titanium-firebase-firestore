/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package firebase.firestore;

import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.json.JSONException;
import org.json.JSONObject;

import android.support.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QuerySnapshot;

@Kroll.proxy(creatableInModule = FirestoreModule.class)
public class CollectionProxy extends KrollProxy {
	private KrollFunction onSetCallback;
	private KrollFunction onGetCallback;
	private JSONObject collectiontypes = new JSONObject();
	private static final String LCAT = FirestoreModule.LCAT;
	
	public static FirebaseFirestore db;
	private String collectionName;

	public CollectionProxy() {
		super();

	}

	@Override
	public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
		db = FirestoreModule.getDb();
		JSONObject typeOfCollections = new JSONObject();
		Object o = args[0];
		if (o instanceof String)
			collectionName = (String) o;
		KrollDict types = (KrollDict) args[1];
		try {
			
			for (String key : types.keySet()) {
				switch (types.getInt(key)) {
				case FirestoreModule.TYPE_BOOLEAN:
					collectiontypes.put(key, FirestoreModule.TYPE_BOOLEAN);
					break;
				case FirestoreModule.TYPE_STRING:
					collectiontypes.put(key, FirestoreModule.TYPE_STRING);
					break;
				case FirestoreModule.TYPE_INT:
					collectiontypes.put(key, FirestoreModule.TYPE_INT);
					break;
				case FirestoreModule.TYPE_FLOAT:
					collectiontypes.put(key, FirestoreModule.TYPE_FLOAT);
					break;
				case FirestoreModule.TYPE_DOUBLE:
					collectiontypes.put(key, FirestoreModule.TYPE_DOUBLE);
					break;
				case FirestoreModule.TYPE_LONG:
					collectiontypes.put(key, FirestoreModule.TYPE_LONG);
					break;
				}
			}
			typeOfCollections.put(collectionName, collectiontypes);
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	@Kroll.method
	public void add(String collection, KrollDict data, KrollFunction callback) {
		db.collection(collection)
				.add(data)
				.addOnSuccessListener(
						new OnSuccessListener<DocumentReference>() {
							@Override
							public void onSuccess(
									DocumentReference documentReference) {

							}
						}).addOnFailureListener(new OnFailureListener() {
					@Override
					public void onFailure(@NonNull Exception e) {

					}
				});
	}

	@Kroll.method
	public void get(String collection, Object callback) {
		if (callback != null) {
			onGetCallback = (KrollFunction) callback;
		}
		db.collection("users").get()
				.addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
					@Override
					public void onComplete(@NonNull Task<QuerySnapshot> task) {
						List<Object> list = new ArrayList();
						KrollDict dict = new KrollDict();
						if (task.isSuccessful()) {
							for (DocumentSnapshot document : task.getResult()) {
								list.add(document);
							}
							dict.put("collection", list.toArray());

						} else {
						}
						onGetCallback.call(getKrollObject(), dict);
					}
				});

	}

	@Kroll.method
	public String getApiName() {
		return "";
	}
}